进程标识符Pid

pid_t  :有符号16位整形数  （3万多吧）
ps命令
文件描述符使用策略：优先使用当前可用范围内最小的那个
进程号是顺次向下使用


进程的产生
fork()
vfork()
fork后父子进程的区别：
(1):
返回值不同
(2):pid不一样
(3):ppid不一样
(4):未决信号和文件锁不继承
(5):资源利用率清零


init进程：是所有进程的祖先进程  1号进程 是祖先进程不是父进程

fork返回值：

在folk之前要刷新所有的成功打开的流  fflush(NULL)  
\n是往标准输出设备上输出
全缓冲模
缓冲机制

begin还没有写入到文件的时候应fork了

getpid()

getppid()

永远不要猜测哪个进程先运行

调度器的调度策略决定



僵尸状态瞬间消失也很正常，说明系统及时处理
僵尸进程不会占用很多内存，但是会占用大量的pid号


fork()后面加了写时拷贝技术，谁用谁拷贝，基本上vfork就废弃了


进程的消亡及释放资源 

wait()
waitpid()
waitid()
为什么会是命令行先弹出来是因为没有wait


exec函数族

用户权限及组权限

getuid()  返回用户实际ID
geteuid() 返回进程有效ID
getgid()  获取当前进程的真实组ID
getegid() 返回当前进程的有效组ID
setuid()
setgid()
setregid()



解释器文件
说白了就是脚本文件
脚本文件会有脚本文件的标记
system函数

进程会计

acct()函数

进程时间

times()

守护进程:
也叫做精灵进程  
会话： session 标识  
终端： 
守护进程目前不需要收尸
调用子进程的时候父进程直接退出了，也就是说TTID是1

PID  PGID   SID这三个值一样

setsid();
当进程是会话的领头进程时setsid()调用失败并返回（-1）。
setsid()调用成功后，返回新的会话的ID，调用setsid函数的进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离。
由于会话对控制终端的独占性，进程同时与控制终端脱离。

getpgrp();
getpgid()
setpgid()

系统日志书写
syslogd  所有的要去写系统日志的内容都把自己要写的系统日志提交给syslogd的这样服务统一由syslogd去写

只有syslogd才有权限写系统日志

syslogd服务
openlog();
syslog();
closelog();








































